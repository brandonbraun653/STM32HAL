rule explicit_alias ( name : sources * : requirements * : default-build * : usage-requirements * )
    {
    alias $(name) : $(sources) : $(requirements) : $(default-build) : $(usage-requirements) ;
    explicit $(name) ;
    }

# ------------------------------------------
# Build Target Specific Options 
# ------------------------------------------
local f7_dbg_defs = DEBUG ;
local f7_dbg_cflags = -ggdb -Og ;

local f7_rel_defs = NDEBUG ;
local f7_rel_cflags = -O3 ;


# ------------------------------------------
# Generic STM32F7 Family CFlags
# ------------------------------------------
# Applies to all F7 targets, but not propagated to dependents.
local generic_f7_requirements_cflags = 
    -fno-common
    -fmessage-length=0
    -fno-exceptions
    -ffunction-sections
    -fdata-sections
    -Wall
    --std=gnu11 
    ;

# Assumes all devices are Cortex-M7 processors with HW FPU.
# Will be propagated to dependents
local generic_f7_usage_requirements_cflags = 
    -mfloat-abi=hard
    -mcpu=cortex-m7
    -mthumb
    ;

# Likely also compiled by a C++ compiler, but the flags are the same
local generic_f7_usage_requirements_cxxflags = 
    $(generic_f7_usage_requirements_cflags)
    ;

local all_generic_f7_cflags =
    $(generic_f7_requirements_cflags)
    $(generic_f7_usage_requirements_cflags)
    ;

# ------------------------------------------
# Generic STM32F7 Family Linker Flags
# ------------------------------------------
# Applies to all F7 targets, but not propagated to dependents.
local generic_f7_requirements_link_flags = 
    -mthumb 
    -mabi=aapcs 
    ;

# Assumes all devices are Cortex-M7 processors with HW FPU.
# Will be propagated to dependents.
local generic_f7_usage_requirements_link_flags = 
    -mfloat-abi=hard 
    -mcpu=cortex-m7
    ;

local all_generic_f7_link_flags = 
    $(generic_f7_requirements_link_flags)
    $(generic_f7_usage_requirements_link_flags)
    ;

# ------------------------------------------
# Source/Include Directories 
# ------------------------------------------
local f7_hal_driver_src_dir = STM32F7xx_HAL_Driver/Src ;
local f7_dev_system_src_dir = Device/sys ;
local f7_dev_startup_src_dir = Device/startup ;

local f7_hal_inc_dir = STM32F7xx_HAL_Driver/Inc ;
local f7_dev_inc_dir = Device/include ;
local f7_cfg_inc_dir = Device/conf ;
local cmsis_inc_dir = ../cmsis/CMSIS/Core/Include ;

local f7_include_dirs = 
    $(f7_hal_inc_dir)
    $(f7_dev_inc_dir)
    $(f7_cfg_inc_dir)
    $(cmsis_inc_dir)
    ;

# ------------------------------------------
# Source Files
# ------------------------------------------
local f7_common_src = $(f7_dev_system_src_dir)/system_stm32f7xx.c ;
local f7_ll_src = [ glob $(f7_hal_driver_src_dir)/stm32f7xx_ll_*.c ] ;
local f7_hal_src = [ glob $(f7_hal_driver_src_dir)/stm32f7xx_hal_*.c ] ;

# ------------------------------------------
# Device Specific Libs: 
#   Figures out what device we are actually compiling for. By default
#   propagates MCU specific defines/cflags/linkflags in the usage-requirements 
#   field. This is how so many chip variants are supported without much effort.
# ------------------------------------------
# If this is hit, you need to define <ThorMCU> for one of the project requirements.
lib F7_TARGET_MCU : ThorMCU_feature_not_defined.c : <ThorMCU>STM32F7xx : <link>static ;

lib F7_TARGET_MCU
    :   $(f7_dev_startup_src_dir)/startup_stm32f767xx.c

    :   <ThorMCU>STM32F767
        <define>DEBUG_DEFAULT_INTERRUPT_HANDLERS
        <include>$(f7_include_dirs)
        <cflags>$(all_generic_f7_cflags)
        <cflags>-mfpu=fpv5-sp-d16
        <linkflags>$(all_generic_f7_link_flags)
        <linkflags>-mfpu=fpv5-sp-d16 

    :   <link>static

    # Expect these to be propagated to all projects
    :   <define>STM32F767xx
        <linkflags>-mfpu=fpv5-sp-d16
        <linkflags>$(generic_f7_usage_requirements_link_flags)
        <cflags>$(generic_f7_usage_requirements_cflags)
        <cflags>-mfpu=fpv5-sp-d16 
        <cxxflags>$(generic_f7_usage_requirements_cflags)
        <cxxflags>-mfpu=fpv5-sp-d16
    ;

explicit F7_TARGET_MCU ;

# ------------------------------------------
# Common Project Properties
# ------------------------------------------
project STM32F7_HAL_DRIVER : usage-requirements <include>$(f7_include_dirs) ;

# ------------------------------------------
# STM32HAL Low Level Driver Lib Targets
# ------------------------------------------
lib LL_DRIVER : invld_stm32f7_ll_cfg.c : : <link>static ;

lib LL_DRIVER 
    :   $(f7_ll_src)
        $(f7_common_src)
        F7_TARGET_MCU

    :   <variant>debug
        <include>$(f7_include_dirs)
        <define>$(f7_dbg_defs)
        <cflags>$(f7_dbg_cflags)
        <cflags>$(all_generic_f7_cflags)

    :   <link>static

    :   <define>USE_FULL_LL_DRIVER
        <use>F7_TARGET_MCU
    ;

lib LL_DRIVER 
    :   $(f7_ll_src) 
        $(f7_common_src)
        F7_TARGET_MCU

    :   <variant>release
        <include>$(f7_include_dirs)
        <define>$(f7_rel_defs)
        <cflags>$(f7_rel_cflags)
        <cflags>$(all_generic_f7_cflags)

    :   <link>static

    :   <define>USE_FULL_LL_DRIVER
        <use>F7_TARGET_MCU
    ;

explicit LL_DRIVER ;

# ------------------------------------------
# STM32HAL Driver Lib Targets
# ------------------------------------------
lib HAL_DRIVER : invld_stm32f7_hal_cfg.c : : <link>static ;

lib HAL_DRIVER 
    :   $(f7_hal_src)  
        $(f7_common_src)
        F7_TARGET_MCU

    :   <variant>debug
        <include>$(f7_include_dirs)
        <define>$(f7_dbg_defs)
        <cflags>$(f7_dbg_cflags)
        <cflags>$(all_generic_f7_cflags)

    :   <link>static

    :   <use>F7_TARGET_MCU
    ;

lib HAL_DRIVER
    :   $(f7_hal_src) 
        $(f7_common_src)
        F7_TARGET_MCU

    :   <variant>release
        <include>$(f7_include_dirs)
        <define>$(f7_rel_defs)
        <cflags>$(f7_rel_cflags)
        <cflags>$(all_generic_f7_cflags)

    :   <link>static

    :   <use>F7_TARGET_MCU
    ;

explicit HAL_DRIVER ;

# ------------------------------------------
# STM32F7xx Library Components:
#   These are intented to be consumed by the user
# ------------------------------------------
# When used, propagates the includes to the target
explicit_alias PUB : : : : <include>$(f7_include_dirs) ;

# Note: When using an alias and it has sources, the usage requirements
#       are propagated up too. So...this alias should provide the lib
#       AND the headers used to interact with it. Ok.
explicit_alias F7_HAL : HAL_DRIVER : : <ThorMCU>STM32F7xx : <use>PUB ;

explicit_alias F7_LL : LL_DRIVER : : <ThorMCU>STM32F7xx : <use>PUB ;

explicit_alias F7_LIB : F7_HAL F7_LL : : <ThorMCU>STM32F7xx : <use>PUB ;


